trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

# Define Variables for the Environments

variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa 

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'Azure-Sentinel'
          backendAzureRmStorageAccountName: 'terraformremotestorge'
          backendAzureRmContainerName: 'tfstatemds'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: true

- stage: DeployAKSCloster
  jobs: 
    - deployment: DeployDevAksCluster
      displayName: DeployDevAksCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              displayName: DownloadSecureFileSSHKEYS
              name: sshkey
              inputs:
                secureFile: 'id_rsa.pub'

            - task: TerraformCLI@0
              displayName: TerraformInit
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'aks-azurerm-svc-con'
                backendAzureRmSubscriptionId: '74689d90-fec6-4abb-bb50-3a496edbc727'
                backendAzureRmResourceGroupName: 'Azure-Sentinel'
                backendAzureRmStorageAccountName: 'terraformremotestorge'
                backendAzureRmContainerName: 'tfstatemds'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: TerraforPlan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: TerraforPlan
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: true

# Deploy QA Cluster


    - deployment: DeployQAAksCluster
      dependsOn: DeployDevAKSCluster
      displayName: DeployQAAksCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(QA_ENVIRONMENT)
      strategy:
            runOnce:
              deploy:
                steps:
                - task: DownloadSecureFile@1
                  displayName: DownloadSecureFileSSHKEYS
                  name: sshkey
                  inputs:
                    secureFile: 'id_rsa.pub'

                - task: TerraformCLI@0
                  displayName: TerraformInit
                  inputs:
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    backendType: 'azurerm'
                    backendServiceArm: 'aks-azurerm-svc-con'
                    backendAzureRmSubscriptionId: '74689d90-fec6-4abb-bb50-3a496edbc727'
                    backendAzureRmResourceGroupName: 'Azure-Sentinel'
                    backendAzureRmStorageAccountName: 'terraformremotestorge'
                    backendAzureRmContainerName: 'tfstatemds'
                    backendAzureRmKey: 'aks-$(QA_ENVIRONMENT).tfstate'
                    allowTelemetryCollection: false

                - task: TerraformCLI@0
                  displayName: TerraforPlan
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'aks-azurerm-svc-con'
                    commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(QA_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: false

                - task: TerraformCLI@0
                  displayName: TerraforPlan
                  inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                    environmentServiceName: 'aks-azurerm-svc-con'
                    commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(QA_ENVIRONMENT)-$(Build.BuildId).out'
                    allowTelemetryCollection: true