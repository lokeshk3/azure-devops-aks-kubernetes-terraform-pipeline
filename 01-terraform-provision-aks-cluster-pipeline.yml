# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest


stages:
  - stage: 
    jobs:
      - job: TerraformvalidateJob
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: PublishArtifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)terraform-manifests'
            backendType: 'azurerm'
            backendServiceArm: 'aks-azurerm-svc-con'
            backendAzureRmSubscriptionId: '74689d90-fec6-4abb-bb50-3a496edbc727'
            backendAzureRmResourceGroupName: 'Azure-Sentinel'
            backendAzureRmStorageAccountName: 'terraformremotestorge'
            backendAzureRmContainerName: 'tfstatemds'
            backendAzureRmKey: 'aks-base.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)terraform-manifests'
            allowTelemetryCollection: true
            
            
